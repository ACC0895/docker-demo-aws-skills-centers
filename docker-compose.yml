# ========================================
# Docker Compose - Orquestador de Contenedores
# ========================================
# Este archivo define TODOS los servicios de la aplicaci√≥n
# Con UN SOLO COMANDO puedes gestionar m√∫ltiples contenedores
#
# Esto es similar a c√≥mo AWS ECS gestiona contenedores,
# pero todo corriendo localmente en tu m√°quina.
#
# Comando para iniciar: docker-compose up -d
# Comando para escalar: docker-compose up -d --scale aws-skills-centers-demo=3
# Comando para detener: docker-compose down
# ========================================

services:
  # ==========================================
  # SERVICIO 1: Aplicaci√≥n Web Frontend
  # ==========================================
  # Este servicio representa tu aplicaci√≥n web principal
  # En AWS ECS, esto ser√≠a una "Task Definition"
  
  aws-skills-centers-demo:
    # SIN container_name para permitir escalado
    # Docker asignar√° nombres autom√°ticamente:
    # docker-demo-aws-skills-centers-demo-1
    # docker-demo-aws-skills-centers-demo-2
    # docker-demo-aws-skills-centers-demo-3
    
    # Construir desde el Dockerfile en el directorio actual
    # El orquestador construye la imagen autom√°ticamente
    build:
      context: .
      dockerfile: Dockerfile
    
    # PUERTOS DIN√ÅMICOS para permitir m√∫ltiples instancias
    # Instancia 1: http://localhost:8080
    # Instancia 2: http://localhost:8081
    # Instancia 3: http://localhost:8082
    # Para m√°s instancias, ampl√≠a el rango: "8080-8089:80"
    ports:
      - "8080-8082:80"
    
    # Pol√≠tica de reinicio autom√°tico
    # El ORQUESTADOR reinicia el contenedor si falla
    # Esto es clave para alta disponibilidad
    restart: unless-stopped
    
    # Labels para organizaci√≥n y b√∫squeda
    # En AWS, usar√≠as tags similares
    labels:
      project: "aws-skills-centers-demo"
      environment: "development"
      maintainer: "Bootcamp Institute"
      tier: "frontend"
      description: "Demo web para aprender Docker y orquestacion"
    
    # L√≠mites de recursos (CPU y Memoria)
    # El ORQUESTADOR asegura que el contenedor no use m√°s de esto
    # En AWS ECS, defines lo mismo en las Task Definitions
    deploy:
      resources:
        limits:
          cpus: '0.5'        # M√°ximo 50% de 1 CPU
          memory: 128M       # M√°ximo 128 MB de RAM
        reservations:
          cpus: '0.25'       # M√≠nimo garantizado: 25% de 1 CPU
          memory: 64M        # M√≠nimo garantizado: 64 MB de RAM
    
    # Variables de entorno (opcional)
    # Puedes pasar configuraci√≥n al contenedor
    environment:
      - APP_NAME=AWS Skills Centers Demo
      - APP_VERSION=1.0
      - ENVIRONMENT=development
    
    # Health check - verifica que el contenedor est√© saludable
    # El ORQUESTADOR puede reiniciar autom√°ticamente si falla
    # En AWS ECS, los health checks son fundamentales
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s      # Revisa cada 30 segundos
      timeout: 3s        # Timeout de 3 segundos
      retries: 3         # Reinicia despu√©s de 3 fallos
      start_period: 5s   # Espera 5s antes de empezar a revisar

# ==========================================
# REDES - Networking Autom√°tico
# ==========================================
# El ORQUESTADOR crea una red virtual autom√°ticamente
# Todos los servicios pueden comunicarse entre s√≠ por nombre
# En AWS ECS, esto se maneja con VPC y Security Groups

networks:
  default:
    name: aws-skills-centers-network
    driver: bridge

# ==========================================
# NOTAS IMPORTANTES PARA ESTUDIANTES
# ==========================================
#
# üéØ CONCEPTOS CLAVE DE ORQUESTACI√ìN:
#
# 1. DECLARATIVO vs IMPERATIVO:
#    - Este archivo es DECLARATIVO: describes QU√â quieres
#    - Los comandos docker run son IMPERATIVOS: describes C√ìMO hacerlo
#
# 2. VENTAJAS DEL ORQUESTADOR:
#    - Un solo comando para todo: docker-compose up
#    - Configuraci√≥n versionable (puedes guardar en Git)
#    - Reproducible (mismo resultado siempre)
#    - F√°cil de escalar: docker-compose up --scale aws-skills-centers-demo=3
#    - Gesti√≥n autom√°tica de redes
#    - Reinicio autom√°tico si algo falla
#
# 3. ESCALADO CON PUERTOS DIN√ÅMICOS:
#    - Sin container_name fijo: permite m√∫ltiples instancias
#    - Puertos din√°micos (8080-8082): cada instancia usa un puerto diferente
#    - En AWS ECS + ALB: esto se maneja autom√°ticamente con un solo endpoint
#
# 4. RELACI√ìN CON AWS ECS:
#    Docker Compose (local)     ‚Üí  AWS ECS (nube)
#    ---------------------         ------------------
#    services                   ‚Üí  Task Definitions
#    docker-compose up          ‚Üí  Create Service
#    Sin container_name         ‚Üí  Task (nombres auto)
#    restart: unless-stopped    ‚Üí  Service Auto Scaling
#    networks                   ‚Üí  VPC + Security Groups
#    deploy.resources           ‚Üí  Task CPU/Memory
#    healthcheck                ‚Üí  Health Checks
#    Puertos manuales           ‚Üí  ALB + puertos din√°micos
#
# 5. PARA EXPERIMENTAR:
#    - Escala a 3 instancias: docker-compose up -d --scale aws-skills-centers-demo=3
#    - Accede a cada instancia: http://localhost:8080, 8081, 8082
#    - Agrega un segundo servicio (ej: base de datos)
#    - Modifica los l√≠mites de recursos
#
# 6. COMANDOS √öTILES:
#    docker-compose up -d                                  # Iniciar servicios
#    docker-compose up -d --scale aws-skills-centers-demo=3  # Escalar a 3
#    docker-compose ps                                     # Ver servicios corriendo
#    docker-compose logs -f                                # Ver logs en tiempo real
#    docker-compose stop                                   # Detener servicios
#    docker-compose down                                   # Detener y eliminar
#    docker-compose up -d --build                          # Reconstruir y reiniciar
#
# ==========================================
